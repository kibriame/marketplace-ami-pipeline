packer {
  required_plugins {
    amazon = {
      source  = "github.com/hashicorp/amazon"
      version = "~> 1"
    }
    ansible = {
      source  = "github.com/hashicorp/ansible"
      version = "~> 1"
    }
  }
}

locals {
  timestamp = regex_replace(timestamp(), "[- TZ:]", "")
}

source "amazon-ebs" "autogenerated_1" {
  ami_description             = "AMI with Ansible provisioning and security hardening"
  ami_name                    = "centos7-ami-${local.timestamp}"
  instance_type               = "t2.micro"
  region                      = "ap-southeast-1"
  source_ami                  = "ami-0191308e0547d8180"
  ssh_username                = "centos"
  ssh_pty                     = true
  ssh_timeout                 = "10m"
  associate_public_ip_address = true
  tags = {
    Name = "centos7-ansible"
  }
}

build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  # üõ†Ô∏è Fix CentOS vault repo
  provisioner "shell" {
    script           = "scripts/fix-centos-vault.sh"
    execute_command  = "sudo -S bash '{{ .Path }}'"
  }

  # üêç Install Python 3.8.18
  provisioner "shell" {
    inline = [
      "echo 'üêç Installing Python 3.8.18 from source...'",
      "sudo yum groupinstall -y 'Development Tools'",
      "sudo yum install -y gcc openssl-devel bzip2-devel libffi-devel wget make",
      "cd /usr/src && sudo wget https://www.python.org/ftp/python/3.8.18/Python-3.8.18.tgz",
      "sudo tar xzf Python-3.8.18.tgz",
      "cd Python-3.8.18 && sudo ./configure --enable-optimizations && sudo make altinstall || { echo 'Python build failed'; exit 1; }",
      "sudo ln -sf /usr/local/bin/python3.8 /usr/bin/python3",
      "sudo ln -sf /usr/local/bin/python3.8 /usr/bin/python",
      "sudo rm -rf /usr/src/Python-3.8.18 /usr/src/Python-3.8.18.tgz",
      "echo '‚úÖ Python 3.8 ready for Ansible'"
    ]
  }

  # ‚ûï Install EPEL & Perl dependencies
  provisioner "shell" {
    inline = [
      "echo '‚û°Ô∏è Adding EPEL repository for extended packages...'",
      "sudo yum install -y epel-release",
      "echo 'Installing required Perl dependencies...'",
      "sudo yum install -y perl perl-Error perl-Data-Dumper perl-Encode perl-Exporter perl-File-Path perl-Git",
      "echo '‚úÖ Perl dependencies installed.'"
    ]
  }

  # ‚úÖ Check critical dependencies
  provisioner "shell" {
    inline = [
      "echo 'üîç Checking dependencies...'",
      "command -v python3 || { echo 'Python 3 is not installed'; exit 1; }",
      "command -v perl || { echo 'Perl is not installed'; exit 1; }",
      "echo '‚úÖ All dependencies are available.'"
    ]
  }

  # üîê Fix SFTP server configuration
  provisioner "shell" {
    inline = [
      "echo '‚öôÔ∏è Fixing SFTP server configuration...'",
      "sudo yum install -y openssh openssh-server openssh-clients",
      "sudo mkdir -p /var/run/sshd",
      "sudo sed -i '/^Subsystem sftp/d' /etc/ssh/sshd_config",
      "echo 'Subsystem sftp /usr/libexec/openssh/sftp-server' | sudo tee -a /etc/ssh/sshd_config",
      "sudo systemctl enable sshd",
      "sudo systemctl restart sshd || sudo service sshd restart",
      "echo '‚úÖ SFTP setup complete'"
    ]
  }

  # üß™ Debug info before Ansible
  provisioner "shell" {
    inline = [
      "echo 'üß™ Debugging before Ansible...'",
      "whoami",
      "ls -lah /home/centos",
      "cat /etc/redhat-release",
      "python3 --version",
      "which python3"
    ]
  }

  # üì¶ Run Ansible
  provisioner "ansible" {
    playbook_file   = "playbook.yml"
    extra_arguments = ["-vvv"]
  }
}
